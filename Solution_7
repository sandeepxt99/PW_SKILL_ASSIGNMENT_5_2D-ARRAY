/*
Suppose an array of length n sorted in ascending order is **rotated** between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

- [4,5,6,7,0,1,2] if it was rotated 4 times.
- [0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that **rotating** an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in O(log n) time. */

int findMin(vector<int>& nums) {
        int lo=0, hi=nums.size()-1; 
        int ans = INT_MAX; 
        if(nums[lo]<nums[hi])return nums[lo]; 
        while(lo<=hi){
            int mid = lo + (hi-lo)/2; 
            if(nums[mid]<nums[lo] and nums[mid]<nums[hi]) ans = nums[mid] ; 
            if(nums[lo]<=nums[mid]){
                ans = min(nums[lo], ans); 
                lo = mid+1;
            }else{
                ans = min(ans, nums[lo]); 
                hi = mid-1; 
            }
        }
        return ans; 
    }
